#!/usr/bin/env perl
use strict;
use MIME::Base64;
use Getopt::Long;

# Get commandline options

my $add_to_db = 0;
my $iwlistpath = "/sbin/iwlist";
my $sqlitepath = "/usr/bin/sqlite3";
my $database = "/var/lib/nagios-wifi/access_points.db";
my $help = 0;
my $new = "";
my $update = "";
my $list = "";

GetOptions(
    'a|add:i' =>  \$add_to_db,
    'd|database:s' =>  \$database,
    'h|help' =>  \$help,
    'l|list' =>  \$list,
    'p|iwlistpath:s' =>  \$iwlistpath,
    'n|new:s' =>  \$new,
    's|sqlitepath:s' =>  \$sqlitepath,
    'u|update:s' => \$update,
);

#####################################
# Everything was invoked correctly? #
#####################################

my $usage = "\nusage: $0 -d <database> -p <iwlist_binary> -s <sqlite3_binary>\n\n"
	."  -a: autoadd found networks by invoking this script with the -a <seconds_to_scan>\n"
	."  -l: list all networks that are currently in the database with -l\n"
	."  -n: add one network by invoking this script with -n <encoded_string>\n"
	."  -u: update the settings of a network by invoking the script with -u <encoded_string>\n\n";
@ARGV == 0 || die($usage);
die($usage) if ($help);
die ("$iwlistpath does not exists -> provide another path using the -p option\n") if (!-f $iwlistpath);
die ("$sqlitepath does not exists -> provide another path using the -s option\n") if (!-f $sqlitepath);
die ("$database does not exists -> provide another path using the -d option\n") if (!-f $database);

####################
# Now do some work #
####################

if ($list){
	list_database_entries($database,$sqlitepath);
	exit 0;
}
elsif ($new){
	print_header();
	add_new_encoded_string($database,$sqlitepath,$new);
	print_footer();
	print "OK! network added correctly\n";
	exit 0;
}
elsif ($update){
	print_header();
	update_with_encoded_string($database,$sqlitepath,$update);
	print_footer();
	print "OK! network updated correctly\n";
	exit 0;
}
elsif ($add_to_db > 0) {
	my $start = time;
	my $stop = $start + $add_to_db;
	print "\nScanning and adding to database...\nNew additions & updates:\n";
	print_header();
	while (time < $stop){
		my @scan_output = `sudo $iwlistpath wlan0 scanning`;
		my %datastructure = parse_output(@scan_output);
		add_entries_to_db(\%datastructure, $database, $sqlitepath);
	}
	print_footer();
}
else {
	my @scan_output = `sudo $iwlistpath wlan0 scanning`;
	my %datastructure = parse_output(@scan_output);
	
	validate(\%datastructure, $database, $sqlitepath);

	print "OK! No strange events found in the wifi spectrum\n";
	exit 0;
}

####################
#   Subroutines    #
####################

sub add_entries_to_db {
	my ($datastructure, $database) = @_;

	foreach my $address (keys(%$datastructure)){
		my $id = find_normal_entry($address, $$datastructure{$address}, $database, $sqlitepath);
		if ($id){
			update_entry($address, $id, $$datastructure{$address}, $database, $sqlitepath);
		}
		else {
			insert_entry($address, $$datastructure{$address}, $database, $sqlitepath);
		}
	}
}

sub insert_entry {
	my ($address, $entry, $database, $sqlitepath) = @_;
	printf("| %-20.20s | %-5.5s | %-20.20s | %-4.4s | %-10.10s |\n",
                        $address,
                        "<new>",
                        $entry->{essid},
                        $entry->{channel},
                        $entry->{encryptionkey},
        );
	my $query = "INSERT INTO access_points 
			VALUES (null,
				'$address',
				'$entry->{essid}',
				'$entry->{mode}',
				'$entry->{frequency}',
				'$entry->{channel}',
				'$entry->{encryptionkey}',
				'$entry->{bitrates}',
				'$entry->{quality}',
				'$entry->{signalstrength}',
				'$entry->{extra}',
				'$entry->{ie}',
				'$entry->{groupcipher}',
				'$entry->{pairwisecipher}',
				'$entry->{auth}',
				null
			);";
	my $result = `$sqlitepath $database "$query"`;
}

sub update_entry {
	my ($address, $id, $entry, $database, $sqlitepath) = @_;
	if ($add_to_db > 0){
		printf("| %-20.20s | %-5.5s | %-20.20s | %-4.4s | %-10.10s |\n",
                	        $address,
                        	"$id",
                       		$entry->{essid},
                        	$entry->{channel},
                        	$entry->{encryptionkey},
        	);
	}
	my $query = "UPDATE access_points SET
				essid = '$entry->{essid}',
				mode = '$entry->{mode}',
				frequency = '$entry->{frequency}',
				channel = '$entry->{channel}',
				encryptionkey = '$entry->{encryptionkey}',
				bitrates = '$entry->{bitrates}',
				quality = '$entry->{quality}',
				signalstrength = '$entry->{signalstrength}',
				extra = '$entry->{extra}',
				ie = '$entry->{ie}',
				groupcipher = '$entry->{groupcipher}',
				pairwisecipher = '$entry->{pairwisecipher}',
				auth = '$entry->{auth}'
			WHERE id = $id;";
	my $result = `$sqlitepath $database "$query"`;
}

sub validate {
	my ($datastructure, $database, $sqlitepath) = @_;
	foreach my $address (keys(%$datastructure)){
		my $id = find_normal_entry($address, $$datastructure{$address}, $database, $sqlitepath);
		if ($id){
			update_entry($address, $id, $$datastructure{$address}, $database, $sqlitepath);
		}
		else {
			my $encoded_string = encode_string(
				$$datastructure{$address}->{essid},
				$address,
				$$datastructure{$address}->{channel},
				$$datastructure{$address}->{encryptionkey}
			);
			print "New network found: $$datastructure{$address}->{essid} ($address).",
				" Approve by running $0 -n $encoded_string\n";
			exit 2;
		}
	}
}

sub list_database_entries {
	my ($database, $sqlitepath) = @_;
        my $query = "select * from access_points;";
        my @rows = `$sqlitepath $database "$query"`;
        chomp(@rows);
	my %entries = ();
	foreach my $row (@rows){
        	my ($id, $address, $essid, undef, undef, $channel, $encryption)
			= split(/\|/, $row);
		$entries{$address} = [$id,$essid,$channel,$encryption];
	}

	# Print pretty!

	print_header();
	foreach my $address (sort(keys(%entries))){
		printf("| %-20.20s | %-5.5s | %-20.20s | %-4.4s | %-10.10s |\n",
			$address,
			$entries{$address}[0],
			$entries{$address}[1],
			$entries{$address}[2],
			$entries{$address}[3],
		);
	}
	print_footer();
}

sub print_header {
	print "\n";
	printf("%-76.76s\n",
		"---------------------------------------------------------------------------");
	printf("| %-20.20s | %-5.5s | %-20.20s | %-4.4s | %-10.10s |\n",
		"address","DBid","essid","chan","encryption");
	printf("|%-22.22s|%-7.7s|%-22.22s|%-6.6s|%-12.12s|\n",
		"----------------------","-------","-----------------------",
		"------","------------");
}

sub print_footer {
	printf("%-76.76s\n",
		"---------------------------------------------------------------------------");
	print "\n";
}

sub add_new_encoded_string {
	my ($database, $sqlitepath,$encoded_string) = @_;
	my ($essid,$address,$channel,$encryption) = decode_string($encoded_string);
	printf("| %-20.20s | %-5.5s | %-20.20s | %-4.4s | %-10.10s |\n",
                        $address,"<new>", $essid, $channel,$encryption);
        my $query = "INSERT INTO access_points 
                        VALUES (null,
                                '$address',
                                '$essid',
                                '', '',
                                '$channel',
                                '$encryption',
                                '', '', '', '', '', '', '', '',
                                null
                        );";    
        my $result = `$sqlitepath $database "$query"`;
}

sub update_with_encoded_string {
	my ($database, $sqlitepath,$encoded_string) = @_;
	my ($essid,$address,$channel,$encryption) = decode_string($encoded_string);
	printf("| %-20.20s | %-5.5s | %-20.20s | %-4.4s | %-10.10s |\n",
                        $address,"<upd>", $essid, $channel,$encryption);
        my $query = "UPDATE access_points SET
                                essid = '$essid',
                                channel = '$channel',
                                encryptionkey = '$encryption'
                        WHERE address = '$address';";
        my $result = `$sqlitepath $database "$query"`;
}

sub decode_string {
	my ($string) = @_;
	my $decode_string = decode_base64($string);
        my @fields = split(/,/,$decode_string);
        my $essid = decode_base64($fields[0]);
        my $address = decode_base64($fields[1]);
        my $channel = decode_base64($fields[2]);
        my $encryption = decode_base64($fields[3]);
	return($essid,$address,$channel,$encryption);
}

sub encode_string {
	my ($essid,$address,$channel,$encryption) = @_;
	my $encoded_essid =  encode_base64($essid);
        my $encoded_address = encode_base64($address);
        my $encoded_channel = encode_base64($channel);
        my $encoded_encryption = encode_base64($encryption);
        my $string = join(",",$encoded_essid,$encoded_address,$encoded_channel,$encoded_encryption);
        my $encoded_string = encode_base64($string);
	return($encoded_string);
}

sub find_normal_entry {
	my ($address, $entry, $database, $sqlitepath) = @_;
	my $query = "select * from access_points where address = '$address';";
	my $row = `$sqlitepath $database "$query"`;
	chomp($row);
	my @row = split(/\|/, $row);
	my $id = $row[0];
	if ($id){
		anomality_check(\@row, $entry);
		return($id);
	}
	else {
		return(0);
	}
}

sub anomality_check {
	my ($row, $entry) = @_;
	if ($$row[2] ne $entry->{"essid"}){
                my $string = join(",",$entry->{essid},$entry->{address},$entry->{channel},$entry->{encryptionkey});
		my $encoded_string = encode_base64($string);
		print "Network name of $$row[1] changed from: $$row[2] -> $entry->{essid}.".
			" Approve by running $0 -n $encoded_string\n";

		exit 2;
	}
	if ($$row[6] ne $entry->{"encryptionkey"}){
                my $string = join(",",$entry->{essid},$entry->{address},$entry->{channel},$entry->{encryptionkey});
		my $encoded_string = encode_base64($string);
		print "Encryption of $$row[2] ($$row[1]) changed from: $$row[6] to $entry->{encryptionkey}.".
			" Approve by running $0 -n $encoded_string\n";
		exit 1;
	}
}

sub parse_output {
	my @output = @_;
	my $address = "";
	my %datastructure = ();
	foreach my $line (@output){
		if ($line =~ /- Address:/){
			($address) = $line =~ /- Address: (.+)$/;
			if ($datastructure{$address}){
				print "$address found multiple times, possible spoof attempt\n";
				exit 2;
			} else {
				$datastructure{$address} = {};
			}
		}
		if ($line =~ /ESSID:/){
			my ($essid) = $line =~ /ESSID:"(.+)"$/;
			$datastructure{$address}->{"essid"} = $essid;
		}
		if ($line =~ /Protocol:/){
			my ($protocol) = $line =~ /Protocol:(.+)$/;
			$datastructure{$address}->{"protocol"} = $protocol;
		}
		if ($line =~ /Mode:/){
                        my ($mode) = $line =~ /Mode:(.+)$/;
                        $datastructure{$address}->{"mode"} = $mode;

		}
        	if ($line =~ /Frequency:/){
                        my ($frequency, $channel) = $line =~ /Frequency:(.+) \(Channel (.+)\)$/;
                        $datastructure{$address}->{"frequency"} = $frequency;
                        $datastructure{$address}->{"channel"} = $channel;

		}
        	if ($line =~ /Encryption key:/){
                        my ($encryptionkey) = $line =~ /Encryption key:(.+)$/;
                        $datastructure{$address}->{"encryptionkey"} = $encryptionkey;

		}
        	if ($line =~ /Bit Rates:/){
                        my ($bitrates) = $line =~ /Bit Rates:(.+)$/;
                        $datastructure{$address}->{"bitrates"} = $bitrates;

		}
        	if ($line =~ /Quality=/){
                        my ($quality) = $line =~ /Quality=(.+?)\/100/;
                        $datastructure{$address}->{"quality"} = $quality;
                        my ($signalstrength) = $line =~ /Signal level=(.+?)\/100/;
                        $datastructure{$address}->{"signalstrength"} = $signalstrength;
		}
        	if ($line =~ /Extra:/){
                        my ($extra) = $line =~ /Extra:(.+)$/;
			if ($datastructure{$address}->{"extra"}){
	                        $datastructure{$address}->{"extra"} .= "; $extra";
			} else {
	                        $datastructure{$address}->{"extra"} = $extra;
			}
		}
        	if ($line =~ /IE:/){
                        my ($ie) = $line =~ /IE: (.+)$/;
			if ($datastructure{$address}->{"ie"}){
	                        $datastructure{$address}->{"ie"} .= "; $ie";
			} else {
	                        $datastructure{$address}->{"ie"} = $ie;
			}
		}
        	if ($line =~ /Group Cipher : /){
                        my ($gcipher) = $line =~ /Group Cipher : (.+)$/;
			if ($datastructure{$address}->{"groupcipher"}){
	                        $datastructure{$address}->{"groupcipher"} .= "; $gcipher";
			} else {
	                        $datastructure{$address}->{"groupcipher"} = $gcipher;
			}
		}
        	if ($line =~ /Pairwise Ciphers /){
                        my ($pcipher) = $line =~ /Pairwise Ciphers.*: (.+)$/;
			if ($datastructure{$address}->{"pairwiseciphers"}){
	                        $datastructure{$address}->{"pairwiseciphers"} .= "; $pcipher";
			} else {
	                        $datastructure{$address}->{"pairwiseciphers"} = $pcipher;
			}
		}
        	if ($line =~ /Authentication Suites /){
                        my ($auth) = $line =~ /Authentication Suites.*: (.+)$/;
			if ($datastructure{$address}->{"auth"}){
	                        $datastructure{$address}->{"auth"} .= "; $auth";
			} else {
	                        $datastructure{$address}->{"auth"} = $auth;
			}
		}

	}
	return(%datastructure);
}
