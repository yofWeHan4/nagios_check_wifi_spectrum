#!/usr/bin/env perl
use strict;
use Getopt::Long;
use Data::Dumper;

my ($config_path) = "";
my $add_to_db = 0;
GetOptions(
    'c|config_path:s' =>  \$config_path,
    'a|add' =>  \$add_to_db,
);

my $usage = "usage: $0 -e <config-path>\n";
@ARGV == 0 || die($usage);
die ($usage) if (!$config_path);

my %config = read_config($config_path);

my @scan_output = `$config{"scan_command"}`;

my %datastructure = parse_output(@scan_output);

if ($add_to_db){
	add_entries_to_db(\%datastructure, $config{"ap_database"});
}

validate(\%datastructure, $config{"ap_database"});

sub add_entries_to_db {
	my ($datastructure, $database) = @_;

	foreach my $address (keys(%$datastructure)){
		my $id = find_normal_entry($address, $$datastructure{$address}, $database);
		if ($id){
			update_entry($id, $$datastructure{$address}, $database);
		}
		else {
			insert_entry($address, $$datastructure{$address}, $database);
		}
	}
}

sub insert_entry {
	my ($address, $entry, $database) = @_;
	print "inserting $entry->{essid} ($address)\n";
	my $query = "INSERT INTO access_points 
			VALUES (null,
				'$address',
				'$entry->{essid}',
				'$entry->{mode}',
				'$entry->{frequency}',
				'$entry->{channel}',
				'$entry->{encryptionkey}',
				'$entry->{bitrates}',
				'$entry->{quality}',
				'$entry->{signalstrength}',
				'$entry->{extra}',
				'$entry->{ie}',
				'$entry->{groupcipher}',
				'$entry->{pairwisecipher}',
				'$entry->{auth}'
			);";
	my $result = `$config{"sqlite"} $database "$query"`;
}

sub update_entry {
	my ($id, $entry, $database) = @_;
	my $query = "UPDATE access_points SET
				essid = '$entry->{essid}',
				mode = '$entry->{mode}',
				frequency = '$entry->{frequency}',
				channel = '$entry->{channel}',
				encryptionkey = '$entry->{encryptionkey}',
				bitrates = '$entry->{bitrates}',
				quality = '$entry->{quality}',
				signalstrength = '$entry->{signalstrength}',
				extra = '$entry->{extra}',
				ie = '$entry->{ie}',
				groupcipher = '$entry->{groupcipher}',
				pairwisecipher = '$entry->{pairwisecipher}',
				auth = '$entry->{auth}'
			WHERE id = $id;";
	my $result = `$config{"sqlite"} $database "$query"`;
}

sub validate {
	my ($datastructure, $database) = @_;
	foreach my $address (keys(%$datastructure)){
		my $id = find_normal_entry($address, $$datastructure{$address}, $database);
		if ($id){
			update_entry($id, $$datastructure{$address}, $database);
		}
		else {
			print "New network found: $$datastructure{$address}->{essid} ($address)\n";
			exit 2;
		}
	}
}

sub find_normal_entry {
	my ($address, $entry, $database) = @_;
	my $query = "select * from access_points where address = '$address';";
	my $row = `$config{sqlite} $database "$query"`;
	chomp($row);
	my @row = split(/\|/, $row);
	my $id = $row[0];
	if ($id){
		anomality_check(\@row, $entry);
		return($id);
	}
	else {
		return(0);
	}
}

sub anomality_check {
	my ($row, $entry) = @_;
	if ($$row[2] ne $entry->{"essid"}){
		print "Network name of $$row[1] changed from: $$row[2] -> $entry->{essid}\n";
		exit 2;
	}
	if ($$row[5] ne $entry->{"channel"}){
		print "Channel of $$row[2] ($$row[1]) changed from: $$row[5] to $entry->{channel}\n";
		exit 1;
	}
	if ($$row[6] ne $entry->{"encryptionkey"}){
		print "Encryption of $$row[2] ($$row[1]) changed from: $$row[6] to $entry->{encryptionkey}\n";
		exit 2;
	}
}

sub parse_output {
	my @output = @_;
	my $address = "";
	my %datastructure = ();
	foreach my $line (@output){
		if ($line =~ /- Address:/){
			($address) = $line =~ /- Address: (.+)$/;
			if ($datastructure{$address}){
				print "$address found multiple times, possible spoof attempt\n";
				exit 2;
			} else {
				$datastructure{$address} = {};
			}
		}
		if ($line =~ /ESSID:/){
			my ($essid) = $line =~ /ESSID:"(.+)"$/;
			$datastructure{$address}->{"essid"} = $essid;
		}
		if ($line =~ /Protocol:/){
			my ($protocol) = $line =~ /Protocol:(.+)$/;
			$datastructure{$address}->{"protocol"} = $protocol;
		}
		if ($line =~ /Mode:/){
                        my ($mode) = $line =~ /Mode:(.+)$/;
                        $datastructure{$address}->{"mode"} = $mode;

		}
        	if ($line =~ /Frequency:/){
                        my ($frequency, $channel) = $line =~ /Frequency:(.+) \(Channel (.+)\)$/;
                        $datastructure{$address}->{"frequency"} = $frequency;
                        $datastructure{$address}->{"channel"} = $channel;

		}
        	if ($line =~ /Encryption key:/){
                        my ($encryptionkey) = $line =~ /Encryption key:(.+)$/;
                        $datastructure{$address}->{"encryptionkey"} = $encryptionkey;

		}
        	if ($line =~ /Bit Rates:/){
                        my ($bitrates) = $line =~ /Bit Rates:(.+)$/;
                        $datastructure{$address}->{"bitrates"} = $bitrates;

		}
        	if ($line =~ /Quality=/){
                        my ($quality) = $line =~ /Quality=(.+?)\/100/;
                        $datastructure{$address}->{"quality"} = $quality;
                        my ($signalstrength) = $line =~ /Signal level=(.+?)\/100/;
                        $datastructure{$address}->{"signalstrength"} = $signalstrength;
		}
        	if ($line =~ /Extra:/){
                        my ($extra) = $line =~ /Extra:(.+)$/;
			if ($datastructure{$address}->{"extra"}){
	                        $datastructure{$address}->{"extra"} .= "; $extra";
			} else {
	                        $datastructure{$address}->{"extra"} = $extra;
			}
		}
        	if ($line =~ /IE:/){
                        my ($ie) = $line =~ /IE: (.+)$/;
			if ($datastructure{$address}->{"ie"}){
	                        $datastructure{$address}->{"ie"} .= "; $ie";
			} else {
	                        $datastructure{$address}->{"ie"} = $ie;
			}
		}
        	if ($line =~ /Group Cipher : /){
                        my ($gcipher) = $line =~ /Group Cipher : (.+)$/;
			if ($datastructure{$address}->{"groupcipher"}){
	                        $datastructure{$address}->{"groupcipher"} .= "; $gcipher";
			} else {
	                        $datastructure{$address}->{"groupcipher"} = $gcipher;
			}
		}
        	if ($line =~ /Pairwise Ciphers /){
                        my ($pcipher) = $line =~ /Pairwise Ciphers.*: (.+)$/;
			if ($datastructure{$address}->{"pairwiseciphers"}){
	                        $datastructure{$address}->{"pairwiseciphers"} .= "; $pcipher";
			} else {
	                        $datastructure{$address}->{"pairwiseciphers"} = $pcipher;
			}
		}
        	if ($line =~ /Authentication Suites /){
                        my ($auth) = $line =~ /Authentication Suites.*: (.+)$/;
			if ($datastructure{$address}->{"auth"}){
	                        $datastructure{$address}->{"auth"} .= "; $auth";
			} else {
	                        $datastructure{$address}->{"auth"} = $auth;
			}
		}

	}
	return(%datastructure);
}

sub read_config {

	my $config_path = shift;
	
	if (!-r $config_path){
		die("Could not read the config file. Please check $config_path\n");
	}

	my %config = ();
	open CONFIG, " < $config_path" || die("could not open $config_path\n");
	foreach my $line (<CONFIG>){

		chomp($line);
		next if ($line =~ /^#/);

		my ($parameter, $value) = split(/=/, $line);
		$parameter =~ s/^\s+//;
		$value =~ s/^\s+//;
		$parameter =~ s/\s+$//;
		$value =~ s/\s+$//;

		$config{"scan_command"} = $value if ($parameter eq "scan_command");
		$config{"ap_database"} = $value if ($parameter eq "ap_database");
		$config{"sqlite"} = $value if ($parameter eq "sqlite");
	}
	close CONFIG;

	if ($config{"scan_command"} && $config{"ap_database"} && $config{"sqlite"}){
		return(%config);
	}
	else {
		die("Config file is incomplete\n.");
	}
}
